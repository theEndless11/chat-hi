{"version":3,"sources":["server.js"],"names":["express","require","http","socketIo","app","server","createServer","io","users","messages","use","json","post","req","res","username","body","includes","push","on","socket","console","log","emit","user","text","broadcast","message","callback","newMessage","timestamp","Date","get","sendFile","__dirname","PORT","process","env","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\n\r\n// Initialize app and server\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\n\r\n// In-memory storage for users and messages\r\nlet users = [];\r\nlet messages = [];\r\n\r\n// Middleware\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\n// Routes to handle user registration and message sending\r\napp.post('/join', (req, res) => {\r\n    const { username } = req.body;\r\n\r\n    // Check if the user already exists\r\n    if (!users.includes(username)) {\r\n        users.push(username);\r\n    }\r\n\r\n    res.json({ username });\r\n});\r\n\r\n// WebSocket handling for real-time chat\r\nio.on('connection', socket => {\r\n    console.log('New user connected');\r\n\r\n    // Handle joining a chat\r\n    socket.on('join', username => {\r\n        socket.username = username;\r\n        socket.emit('message', { user: 'System', text: `Welcome ${username}!` });\r\n        \r\n        // Broadcast to others when a new user joins\r\n        socket.broadcast.emit('message', { user: 'System', text: `${username} has joined the chat.` });\r\n    });\r\n\r\n    // Handle receiving and broadcasting messages\r\n    socket.on('sendMessage', (message, callback) => {\r\n        const newMessage = { user: socket.username, text: message, timestamp: new Date() };\r\n        messages.push(newMessage); // Store message in memory\r\n        \r\n        io.emit('message', newMessage);\r\n\r\n        callback();\r\n    });\r\n\r\n    // Handle disconnecting\r\n    socket.on('disconnect', () => {\r\n        console.log('User disconnected');\r\n    });\r\n});\r\n\r\n// Serve the frontend page\r\napp.get('/', (req, res) => {\r\n    res.sendFile(__dirname + '/public/index.html');\r\n});\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => {\r\n    console.log(`Server running on port ${PORT}`);\r\n});\r\n"],"file":"server.dev.js"}