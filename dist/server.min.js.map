{"version":3,"sources":["server.js"],"names":["express","require","http","app","socketIo","io","server","messages","use","json","post","req","res","username","users","includes","push","on","socket","log","emit","user","text","concat","broadcast","message","callback","newMessage","timestamp","Date","console","__dirname","get","process","env","sendFile","PORT"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,SAAUC,QAAQ,aAKlBE,IAAMH,UAHNI,OAAWH,KAAAA,aAAQE,KAKnBE,GAAKD,SAASE,QADdA,MAAM,GACND,SAAKD,GAIXD,IAAII,IAAAA,QAAW,OAEf,WAEAJ,IAAIK,IAAIR,QAAQS,QAGhBN,IAAIO,KAAK,QAAS,SAACC,EAAKC,GAAQ,IAAvBC,EAASF,EAACA,KAAVE,SAIAC,MAAMC,SAASF,IAChBC,MAAAE,KAAWH,GAGfD,EAAIH,KAAK,CAAAI,SAAAA,MAIbR,GAAGY,GAAG,aAAc,SAAAC,GAAjBD,QAAGE,IAAA,sBAIFD,EAAAD,GAAU,OAAQ,SAAAJ,GACdK,EAAOL,SAAWA,EAClBK,EAAAE,KAAY,UAAW,CAAAC,KAAA,SAAAC,KAAA,WAAAC,OAAAV,EAAA,OAEvBK,EAAAM,UAAAJ,KAAA,UAAA,CAAAC,KAAA,SAAAC,KAAA,GAAAC,OAAAV,EAAA,6BACmDS,EAAIL,GAAA,cAAKJ,SAALY,EAAAC,GAAvD,IAAAC,EAAA,CAAAN,KAAAH,EAAAL,SAAAS,KAAAG,EAAAG,UAAA,IAAAC,MAGJtB,SAAAS,KAAAW,GACMtB,GAANe,KAAU,UAAeO,GACAN,MACrBd,EAAAA,GAASS,aAAT,WASAc,QAAQX,IAAI,yBADhBD,IAAAA,IAAM,IAAI,SAAAP,EAAAC,GACNkB,EAAAA,SAAYC,UAAA,wBAKpB5B,IAAI6B,KAASC,QAAAC,IAACvB,MAAa,IACvBC,OAAIuB,OAAJC,KAAaL,WAGjBD,QAAAX,IAAA,0BAAAI,OAAAa","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\n\r\n// Initialize app and server\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\n\r\n// In-memory storage for users and messages\r\nlet users = [];\r\nlet messages = [];\r\n\r\n// Middleware\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\n// Routes to handle user registration and message sending\r\napp.post('/join', (req, res) => {\r\n    const { username } = req.body;\r\n\r\n    // Check if the user already exists\r\n    if (!users.includes(username)) {\r\n        users.push(username);\r\n    }\r\n\r\n    res.json({ username });\r\n});\r\n\r\n// WebSocket handling for real-time chat\r\nio.on('connection', socket => {\r\n    console.log('New user connected');\r\n\r\n    // Handle joining a chat\r\n    socket.on('join', username => {\r\n        socket.username = username;\r\n        socket.emit('message', { user: 'System', text: `Welcome ${username}!` });\r\n        \r\n        // Broadcast to others when a new user joins\r\n        socket.broadcast.emit('message', { user: 'System', text: `${username} has joined the chat.` });\r\n    });\r\n\r\n    // Handle receiving and broadcasting messages\r\n    socket.on('sendMessage', (message, callback) => {\r\n        const newMessage = { user: socket.username, text: message, timestamp: new Date() };\r\n        messages.push(newMessage); // Store message in memory\r\n        \r\n        io.emit('message', newMessage);\r\n\r\n        callback();\r\n    });\r\n\r\n    // Handle disconnecting\r\n    socket.on('disconnect', () => {\r\n        console.log('User disconnected');\r\n    });\r\n});\r\n\r\n// Serve the frontend page\r\napp.get('/', (req, res) => {\r\n    res.sendFile(__dirname + '/public/index.html');\r\n});\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => {\r\n    console.log(`Server running on port ${PORT}`);\r\n});\r\n"]}